buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://repository.jboss.org/nexus/content/groups/public' }
    }
    dependencies {
        classpath group: 'com.layer', name: 'gradle-git-repo-plugin', version: '2.0.2'
    }
}

group 'org.jvmscript'
version '3.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'git-repo'
apply plugin: 'signing'

sourceCompatibility = JavaVersion.VERSION_17

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.apache.logging.log4j') {
            details.useVersion '2.19.0'
        }
    }
}

ext {
    spockVersion = '2.4-M4-groovy-4.0'
    groovyVersion = '4.0.21'

    pomFilePath = "${project.projectDir}/build/publications/jar/pom-default.xml"
    pomFile = file(pomFilePath)

    gitPublishConfig {
        org = "jmvscript"
        repo = "maven-repo"
        gitUrl = 'https://agilemicroservices@github.com/agilemicroservices/maven-repo.git'
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://repository.jboss.org/nexus/content/groups/public' }
}

task sourceJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
}

configurations {
    pom
    all*.exclude group: 'xml-apis', module: 'xml-apis'
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
    if (pomFile.exists()) {
        pom pomFile
    }
}

task signPom (type: Sign) {
    sign configurations.pom
}

def getPomSignature = {
    return project.tasks.signPom.signatureFiles.collect{it}[0]
}

task signJars (type : Sign, dependsOn: [jar, javadocJar, sourceJar]) {
    sign configurations.archives
}

if (project.ext.pomFile.exists()) {
    task preparePublication (dependsOn : [signJars, signPom])
} else {
    task preparePublication(dependsOn: signJars)
}

def getSignatureFiles = {
    def allFiles = project.tasks.signJars.signatureFiles.collect { it }
    def signedSources = allFiles.find { it.name.contains('-sources') }
    def signedJavadoc = allFiles.find { it.name.contains('-javadoc') }
    def signedJar = (allFiles - [signedSources, signedJavadoc])[0]
    return [
            [archive: signedSources, classifier: 'sources', extension: 'jar.asc'],
            [archive: signedJavadoc, classifier: 'javadoc', extension: 'jar.asc'],
            [archive: signedJar,     classifier: null,      extension: 'jar.asc']
    ]
}

dependencies {

    api group: 'jakarta.mail', name: 'jakarta.mail-api', version: '2.1.1'
    api group: 'org.eclipse.angus', name: 'angus-mail', version: '2.0.1'
    api group: 'org.eclipse.angus', name: 'smtp', version: '2.0.1'

    implementation ('org.apache.logging.log4j:log4j-core:2.19.0')
    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.19.0'

    api group: 'commons-io', name: 'commons-io', version: '2.11.0'
    api group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
    api group: 'org.apache.commons', name: 'commons-compress', version: '1.26.2'
    api group: 'org.apache.commons', name: 'commons-exec', version: '1.3'
    api group: 'commons-cli', name: 'commons-cli', version:'1.5.0'
    api group: 'commons-net', name: 'commons-net', version:'3.9.0'

    api group: 'org.apache.httpcomponents', name: 'httpclient', version:'4.5.14'
    api group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.5.14'

    api group: 'org.apache.poi', name: 'poi', version: '5.2.3'
    api (group: 'org.apache.poi', name: 'poi-ooxml', version: '5.2.3') {
        exclude group: 'stax', module: 'stax-api'
    }

    api group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.14.2'
    api group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.14.2'
    api group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.14.2'
    api group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.14.2'


    api group: 'com.univocity', name: 'univocity-parsers', version: '2.9.1'
    api group: 'net.lingala.zip4j', name: 'zip4j', version: '2.11.3'

    implementation group: 'com.hierynomus', name: 'sshj', version: '0.34.0'

    api group: 'com.lmax', name: 'disruptor', version: '3.4.4'

    api group: 'org.bouncycastle', name: 'bcpg-jdk18on', version: '1.78.1'
    api group: 'org.bouncycastle', name: 'bcprov-jdk18on', version: '1.78.1'
    api group: 'org.bouncycastle', name: 'bcprov-ext-jdk18on', version: '1.78.1'

    api group: 'org.sql2o', name: 'sql2o', version: '1.5.4'

    api group: 'io.netty', name: 'netty-all', version: '4.1.110.Final'

    api group: 'software.amazon.awssdk', name: 's3', version: '2.9.26'
    api group: 'software.amazon.awssdk', name: 'protocol-core', version: '2.9.26'

    api group: 'com.box', name: 'box-java-sdk', version: '4.6.0'

    api group: 'org.apache.groovy', name: 'groovy', version: groovyVersion

    testImplementation(group: 'org.spockframework', name: 'spock-core', version: spockVersion) {
        exclude group: 'org.codehaus.groovy'
    }

    testImplementation(group: 'org.spockframework', name: 'spock-bom', version: spockVersion) {
        exclude group: 'org.codehaus.groovy'
    }

    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.6.0'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.6.0'
    testImplementation group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '5.6.0'
}

publishing {
    repositories {
        maven {
            url "file://${gitPublishConfig.home}/${gitPublishConfig.org}/${gitPublishConfig.repo}/releases"
        }
    }

    publications {

        jar(MavenPublication) {
            from components.java
            pom.withXml {
                asNode().appendNode('description', 'JVM scripting utility library.')
                asNode().appendNode('name', rootProject.name)
                asNode().appendNode('url', 'https://github.com/agilemicroservices/jvmscript')
                asNode().appendNode('licenses')
                    .appendNode('license')
                        .appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                asNode().appendNode('scm')
                    .appendNode('url', 'https://github.com/agilemicroservices/jvmscript')
                asNode().appendNode('developers')
                    .appendNode('developer')
                        .appendNode('id', 'agilemicroservices')

                if (!project.ext.pomFile.exists()) {
                    writeTo (project.ext.pomFile)
                }
            }

            artifact sourceJar {
                classifier 'sources'
            }

            artifact javadocJar {
                classifier 'javadoc'
            }
        }

        gpgJars (MavenPublication) {
            // give signature files to artifact method
            getSignatureFiles().each {signature ->
                if (signature.archive.exists()) {
                    artifact(signature.archive) {
                        classifier = signature.classifier
                        extension = signature.extension
                    }
                }
            }
        }

        if (project.ext.pomFile.exists()) {
            def signatureArchive = getPomSignature()
            if (signatureArchive.exists()) {
                gpgPom(MavenPublication) {
                    artifact(signatureArchive) {
                        classifier = null
                        extension = 'pom.asc'
                    }
                }
            }
        }
    }
}