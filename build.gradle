buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://repository.jboss.org/nexus/content/groups/public' }
    }
    dependencies {
        classpath group: 'com.layer', name: 'gradle-git-repo-plugin', version: '2.0.2'
    }
}

group 'org.jvmscript'
version '2.0-SNAPSHOT'

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'git-repo'
apply plugin: 'signing'

sourceCompatibility = JavaVersion.VERSION_11

ext {
    pomFilePath = "${project.projectDir}/build/publications/jar/pom-default.xml"
    pomFile = file(pomFilePath)

    gitPublishConfig {
        org = "jmvscript"
        repo = "maven-repo"
        gitUrl = 'https://agilemicroservices@github.com/agilemicroservices/maven-repo.git'
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://repository.jboss.org/nexus/content/groups/public' }
}

task sourceJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
}

configurations {
    pom
    all*.exclude group: 'xml-apis', module: 'xml-apis'
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
    if (pomFile.exists()) {
        pom pomFile
    }
}

task signPom (type: Sign) {
    sign configurations.pom
}

def getPomSignature = {
    return project.tasks.signPom.signatureFiles.collect{it}[0]
}

task signJars (type : Sign, dependsOn: [jar, javadocJar, sourceJar]) {
    sign configurations.archives
}

if (project.ext.pomFile.exists()) {
    task preparePublication (dependsOn : [signJars, signPom])
} else {
    task preparePublication(dependsOn: signJars)
}

def getSignatureFiles = {
    def allFiles = project.tasks.signJars.signatureFiles.collect { it }
    def signedSources = allFiles.find { it.name.contains('-sources') }
    def signedJavadoc = allFiles.find { it.name.contains('-javadoc') }
    def signedJar = (allFiles - [signedSources, signedJavadoc])[0]
    return [
            [archive: signedSources, classifier: 'sources', extension: 'jar.asc'],
            [archive: signedJavadoc, classifier: 'javadoc', extension: 'jar.asc'],
            [archive: signedJar,     classifier: null,      extension: 'jar.asc']
    ]
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.10.2'
}

dependencies {
    //compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.12'

    compile group: 'javax.mail', name: 'javax.mail-api', version: '1.5.6'
    compile group: 'com.sun.mail', name: 'javax.mail', version: '1.5.6'
    compile group: 'com.sun.mail', name: 'smtp', version: '1.5.6'

    compile group: 'org.agilemicroservices', name: 'agilemicroservices-orm', version: '1.0'

    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'
    compile group: 'org.apache.commons', name: 'commons-compress', version: '1.18'
    compile group: 'org.apache.commons', name: 'commons-exec', version: '1.3'
    compile group: 'commons-cli', name: 'commons-cli', version:'1.4'
    compile group: 'commons-net', name: 'commons-net', version:'3.6'

    compile group: 'org.apache.httpcomponents', name: 'httpclient', version:'4.5.6'
    compile group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.5.6'

    compile group: 'org.apache.poi', name: 'poi', version: '3.15'
    compile (group: 'org.apache.poi', name: 'poi-ooxml', version: '3.15') {
        exclude group: 'stax', module: 'stax-api'
    }

    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.7.4'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.7.4'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.7.4'

//    compile group: 'org.kie', name: 'kie-api', version: '7.7.0.Final'
//    compile group: 'org.kie', name: 'kie-spring', version: '7.7.0.Final'
//    compile group: 'org.drools', name: 'drools-compiler', version: '7.7.0.Final'
//    compile group: 'org.drools', name: 'drools-core', version: '7.7.0.Final'

    compile group: 'com.univocity', name: 'univocity-parsers', version: '2.3.0'
    compile group: 'net.lingala.zip4j', name: 'zip4j', version: '1.3.2'
    compile group: 'com.jcraft', name: 'jsch', version: '0.1.54'
    compile group: 'com.jcraft', name: 'jzlib', version: '1.1.3'

    // slf4j
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.22'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.8'

    compile group: 'org.bouncycastle', name: 'bcpg-jdk15on', version: '1.54'
    compile group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.54'
    compile group: 'org.bouncycastle', name: 'bcprov-ext-jdk15on', version: '1.54'

    compile group: 'org.sql2o', name: 'sql2o', version: '1.5.4'

    // spring
    compile group: 'org.springframework', name: 'spring-context', version: '4.2.3.RELEASE'
    compile group: 'org.springframework', name: 'spring-orm', version: '4.2.3.RELEASE'
    compile group: 'org.springframework.data', name: 'spring-data-jpa', version: '1.9.1.RELEASE'

    compile group: 'io.netty', name: 'netty-all', version: '4.0.32.Final'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile "org.spockframework:spock-core:1.0-groovy-2.4"
}

publishing {
    repositories {
        maven {
            url "file://${gitPublishConfig.home}/${gitPublishConfig.org}/${gitPublishConfig.repo}/releases"
        }
    }

    publications {

        jar(MavenPublication) {
            from components.java
            pom.withXml {
                asNode().appendNode('description', 'JVM scripting utility library.')
                asNode().appendNode('name', rootProject.name)
                asNode().appendNode('url', 'https://github.com/agilemicroservices/jvmscript')
                asNode().appendNode('licenses')
                    .appendNode('license')
                        .appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                asNode().appendNode('scm')
                    .appendNode('url', 'https://github.com/agilemicroservices/jvmscript')
                asNode().appendNode('developers')
                    .appendNode('developer')
                        .appendNode('id', 'agilemicroservices')

                if (!project.ext.pomFile.exists()) {
                    writeTo (project.ext.pomFile)
                }
            }

            artifact sourceJar {
                classifier 'sources'
            }

            artifact javadocJar {
                classifier 'javadoc'
            }
        }

        gpgJars (MavenPublication) {
            // give signature files to artifact method
            getSignatureFiles().each {signature ->
                if (signature.archive.exists()) {
                    artifact(signature.archive) {
                        classifier = signature.classifier
                        extension = signature.extension
                    }
                }
            }
        }

        if (project.ext.pomFile.exists()) {
            def signatureArchive = getPomSignature()
            if (signatureArchive.exists()) {
                gpgPom(MavenPublication) {
                    artifact(signatureArchive) {
                        classifier = null
                        extension = 'pom.asc'
                    }
                }
            }
        }
    }
}